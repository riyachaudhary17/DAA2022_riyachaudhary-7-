code-1.
#include <bits/stdc++.h>
using namespace std;
#define V 4
#define INF 99999
void printSolution(int dist[][V]);
void floydWarshall(int graph[][V])
{
    int dist[V][V], i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][j] > (dist[i][k] + dist[k][j])
                    && (dist[k][j] != INF
                        && dist[i][k] != INF))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
}

void printSolution(int dist[][V])
{
    cout << "The following matrix shows the shortest "
            "distances"
            " between every pair of vertices \n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF"
                     << "     ";
            else
                cout << dist[i][j] << "     ";
        }
        cout << endl;
    }
}


int main()
{
    int graph[V][V] = { { 0, 5, INF, 10 },
                        { INF, 0, 3, INF },
                        { INF, INF, 0, 1 },
                        { INF, INF, INF, 0 } };

    floydWarshall(graph);
    return 0;
}
code-2.
#include<bits/stdc++.h>
using namespace std;
int max(int a,int b)
{
    return(a>b)?a:b;
}
int knapsack(int w,int wt[],int val[],int n)
{
    if(n==0||w==0)
        return 0;
    if(wt[n-1]>w)
        return knapsack(w,wt,val,n-1);
    else
        return max(val[n-1]+knapsack(w-wt[n-1],wt,val,n-1),knapsack(w,wt,val,n-1));
}
int main()
{
    int val[]={60,100,120};
    int wt[]={10,20,30};
    int w=50;
    int n=sizeof(val)/sizeof(val[0]);
    cout<<knapsack(w,wt,val,n);
    return 0;
}
code-3.
#include<bits/stdc++.h>
using namespace std;
int min(int size,int files[])
{

    priority_queue<int,vector<int>,greater<int>>pq;
    for(int i=0;i<size;i++)
    {

        pq.push(files[i]);
    }
    int count=0;
    while(pq.size()>1)
    {
        int first_smallest=pq.top();
        pq.pop();
        int second_smallest=pq.top();
        pq.pop();
        int temp=first_smallest+second_smallest;
        count+=temp;
        pq.push(temp);
    }
    return count;
}
int main()
{
    int n=6;
    int files[]={2,3,4,5,6,7};
    cout<<"minimum computations="<<min(n,files);
    return 0;

}
