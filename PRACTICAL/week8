code-1.
#include <bits/stdc++.h>
using namespace std;
int minnode(int n, int keyval[], bool mstset[]) {
  int mini = numeric_limits<int>::max();
  int mini_index;
  for (int i = 0; i < n; i++) {
    if (mstset[i] == false && keyval[i] < mini) {
      mini = keyval[i], mini_index = i;
    }
  }
  return mini_index;
}
void findcost(int n, vector<vector<int>> city) {
  int parent[n];
  int keyval[n];
  bool mstset[n];
  for (int i = 0; i < n; i++) {
    keyval[i] = numeric_limits<int>::max();
    mstset[i] = false;
  }
  parent[0] = -1;
  keyval[0] = 0;
  for (int i = 0; i < n - 1; i++) {
    int u = minnode(n, keyval, mstset);
    mstset[u] = true;
    for (int v = 0; v < n; v++) {

      if (city[u][v] && mstset[v] == false &&
          city[u][v] < keyval[v]) {
        keyval[v] = city[u][v];
        parent[v] = u;
      }
    }
  }
  int cost = 0;
  for (int i = 1; i < n; i++)
    cost += city[parent[i]][i];
  cout << cost << endl;
}
int main() {
  int n1 = 7;
  vector<vector<int>> city1 = {{0, 0, 7, 5, 0,0,0},
                               {0, 0, 8, 5, 0,0,0},
                               {7, 8, 0, 9, 7,0,0},
                               {5, 0, 9, 0,15, 6,0},
                               {0, 5, 7, 15, 0,8,9},
                               {0 ,0, 0, 6, 8, 0,11},
                               {0 ,0, 0,0, 9, 11,0}};

  findcost(n1, city1);

  return 0;
}
code-2.
#include <bits/stdc++.h>
using namespace std;
class DSU {
    int* parent;
    int* rank;

public:
    DSU(int n)
    {
        parent = new int[n];
        rank = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = -1;
            rank[i] = 1;
        }
    }
    int find(int i)
    {
        if (parent[i] == -1)
            return i;

        return parent[i] = find(parent[i]);
    }
    void unite(int x, int y)
    {
        int s1 = find(x);
        int s2 = find(y);

        if (s1 != s2) {
            if (rank[s1] < rank[s2]) {
                parent[s1] = s2;
                rank[s2] += rank[s1];
            }
            else {
                parent[s2] = s1;
                rank[s1] += rank[s2];
            }
        }
    }
};

class Graph {
    vector<vector<int> > edgelist;
    int V;

public:
    Graph(int V) { this->V = V; }

    void addEdge(int x, int y, int w)
    {
        edgelist.push_back({ w, x, y });
    }

    void kruskals_mst()
    {
        sort(edgelist.begin(), edgelist.end());
        DSU s(V);
        int ans = 0;
        cout << "Following are the edges in the "
                "constructed MST"
             << endl;
        for (auto edge : edgelist) {
            int w = edge[0];
            int x = edge[1];
            int y = edge[2];
            if (s.find(x) != s.find(y)) {
                s.unite(x, y);
                ans += w;
                cout << x << " -- " << y << " == " << w
                     << endl;
            }
        }
        cout << "Minimum Cost Spanning Tree: " << ans;
    }
};
int main()
{
    Graph g(4);
    g.addEdge(0, 1, 10);
    g.addEdge(1, 3, 15);
    g.addEdge(2, 3, 4);
    g.addEdge(2, 0, 6);
    g.addEdge(0, 3, 5);
    g.kruskals_mst();
    return 0;
}
code-3.
#include<stdio.h>
#include<limits.h>
#define R 3
#define C 3

int min(int x, int y, int z);
int minCost(int cost[R][C], int m, int n)
{
   if (n < 0 || m < 0)
      return INT_MAX;
   else if (m == 0 && n == 0)
      return cost[m][n];
   else
      return cost[m][n] + min( minCost(cost, m-1, n-1),
                               minCost(cost, m-1, n),
                               minCost(cost, m, n-1) );
}
int min(int x, int y, int z)
{
   if (x < y)
      return (x < z)? x : z;
   else
      return (y < z)? y : z;
}
int main()
{
   int cost[R][C] = {{0 ,0 ,7 ,5 ,0 ,0 ,0,
                      0 ,0 ,8 ,5 ,0 ,0 ,0,
                      7 ,8 ,0 ,9 ,7 ,0 ,0,
                      5 ,0 ,9 ,0 ,15 ,6 ,0,
                      0 ,5 ,7 ,15 ,0 ,8 ,9,
                      0 ,0 ,0 ,6 ,8 ,0 ,11,
                      0 ,0 ,0 ,0 ,9 ,11 ,0}};
   printf(" %d ", minCost(cost, 7, 7));
   return 0;
}
